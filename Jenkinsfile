pipeline {
    agent none
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'python:2-alpine'
                }
            }
            steps {
                echo "Building python code"
                sh 'python -m py_compile helloworld.py'
            }
        }     
    

    stage('Test') {
            agent {
                docker {
                    //This image parameter downloads the qnib:pytest Docker image and runs this image as a
                    //separate container. The pytest container becomes the agent that Jenkins uses to run the Test
                    //stage of your Pipeline project.
                    image 'qnib/pytest'
                }
            }
            steps {
               
                //The --junit-xml test-reports/results.xml option makes py.test generate a JUnit XML report,
                sh 'py.test --verbose --junit-xml test-reports/results.xml helloworld.py'
            }
            post {
                always {
                    //This junit step archives the JUnit XML report (generated by the py.test command above) and
                    //The post section’s always condition that contains this junit step ensures that the step is
                    //always executed at the completion of the Test stage, regardless of the stage’s outcome.
                    junit 'test-reports/results.xml'
                }
            }
    }
    stage('Deliver') {
                    agent {
                          docker {
                            image 'python:2-alpine'
                    }
                                }
                    
                    steps {
                            sh 'python -m py_compile deliver.py'
  
                    }
                    post {
                        success {
                           echo "Suceesfully delivered the code"
                        }
                    }
        }







    }
}